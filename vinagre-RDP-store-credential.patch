--- a/plugins/rdp/vinagre-rdp-connection.c
+++ b/plugins/rdp/vinagre-rdp-connection.c
@@ -125,7 +125,7 @@ rdp_parse_item (VinagreConnection *conn, xmlNode *root)
 static gchar *
 rdp_get_best_name (VinagreConnection *conn)
 {
-  gchar *name;
+  const gchar *name;
 
   name = vinagre_connection_get_name (conn);
   if (name != NULL && name[0] != '\0')
@@ -141,8 +141,20 @@ rdp_get_best_name (VinagreConnection *conn)
 static void
 rdp_parse_options_widget (VinagreConnection *conn, GtkWidget *widget)
 {
-  GtkWidget *u_entry, *spin_button, *scaling_button;
-  guint      width, height;
+  GtkWidget   *u_entry, *d_entry, *spin_button, *scaling_button;
+  guint        width, height;
+
+  d_entry = g_object_get_data (G_OBJECT (widget), "domain_entry");
+  if (!d_entry)
+    {
+      g_warning ("Wrong widget passed to rdp_parse_options_widget()");
+      return;
+    }
+
+  g_object_set (conn,
+		"domain", gtk_entry_get_text (GTK_ENTRY (d_entry)),
+		NULL);
+
 
   u_entry = g_object_get_data (G_OBJECT (widget), "username_entry");
   if (!u_entry)
--- a/plugins/rdp/vinagre-rdp-plugin.c
+++ b/plugins/rdp/vinagre-rdp-plugin.c
@@ -143,7 +143,7 @@ vinagre_rdp_plugin_init (VinagreRdpPlugin *plugin)
 static GtkWidget *
 impl_get_connect_widget (VinagrePlugin *plugin, VinagreConnection *conn)
 {
-  GtkWidget *label, *u_entry, *spin_button, *check;
+  GtkWidget *label, *u_entry, *d_entry, *spin_button, *check;
   GtkTable  *table;
   gchar     *str;
 
@@ -193,17 +193,32 @@ impl_get_connect_widget (VinagrePlugin *plugin, VinagreConnection *conn)
   gtk_entry_set_activates_default (GTK_ENTRY (u_entry), TRUE);
 
 
+  label = gtk_label_new_with_mnemonic (_("_Domain:"));
+  gtk_misc_set_alignment (GTK_MISC (label), 0.0, 0.5);
+  gtk_table_attach_defaults (table, label, 1, 2, 4, 5);
+
+  d_entry = gtk_entry_new ();
+  /* Translators: This is the tooltip for the domain field in a RDP connection */
+  gtk_widget_set_tooltip_text (d_entry, _("Optional"));
+  g_object_set_data (G_OBJECT (table), "domain_entry", d_entry);
+  gtk_table_attach_defaults (table, d_entry, 2, 3, 4, 5);
+  gtk_label_set_mnemonic_widget (GTK_LABEL (label), d_entry);
+  if (conn != NULL)
+    gtk_entry_set_text (GTK_ENTRY (d_entry), vinagre_connection_get_domain (conn));
+  gtk_entry_set_activates_default (GTK_ENTRY (d_entry), TRUE);
+
+
   /* Host width */
   label = gtk_label_new_with_mnemonic (_("_Width:"));
   gtk_misc_set_alignment (GTK_MISC (label), 0.0, 0.5);
-  gtk_table_attach_defaults (table, label, 1, 2, 4, 5);
+  gtk_table_attach_defaults (table, label, 1, 2, 5, 6);
 
   spin_button = gtk_spin_button_new_with_range (MIN_SIZE, MAX_SIZE, 1);
   /* Translators: This is the tooltip for the width field in a RDP connection */
   gtk_widget_set_tooltip_text (spin_button, _("Set width of the remote desktop"));
   gtk_spin_button_set_value (GTK_SPIN_BUTTON (spin_button), DEFAULT_WIDTH);
   g_object_set_data (G_OBJECT (table), "width_spin_button", spin_button);
-  gtk_table_attach_defaults (table, spin_button, 2, 3, 4, 5);
+  gtk_table_attach_defaults (table, spin_button, 2, 3, 5, 6);
   gtk_label_set_mnemonic_widget (GTK_LABEL (label), spin_button);
   gtk_entry_set_activates_default (GTK_ENTRY (spin_button), TRUE);
 
@@ -211,14 +226,14 @@ impl_get_connect_widget (VinagrePlugin *plugin, VinagreConnection *conn)
   /* Host height */
   label = gtk_label_new_with_mnemonic (_("_Height:"));
   gtk_misc_set_alignment (GTK_MISC (label), 0.0, 0.5);
-  gtk_table_attach_defaults (table, label, 1, 2, 5, 6);
+  gtk_table_attach_defaults (table, label, 1, 2, 6, 7);
 
   spin_button = gtk_spin_button_new_with_range (MIN_SIZE, MAX_SIZE, 1);
   /* Translators: This is the tooltip for the height field in a RDP connection */
   gtk_widget_set_tooltip_text (spin_button, _("Set height of the remote desktop"));
   gtk_spin_button_set_value (GTK_SPIN_BUTTON (spin_button), DEFAULT_HEIGHT);
   g_object_set_data (G_OBJECT (table), "height_spin_button", spin_button);
-  gtk_table_attach_defaults (table, spin_button, 2, 3, 5, 6);
+  gtk_table_attach_defaults (table, spin_button, 2, 3, 6, 7);
   gtk_label_set_mnemonic_widget (GTK_LABEL (label), spin_button);
   gtk_entry_set_activates_default (GTK_ENTRY (spin_button), TRUE);
 
--- a/plugins/rdp/vinagre-rdp-tab.c
+++ b/plugins/rdp/vinagre-rdp-tab.c
@@ -71,6 +71,9 @@ struct _VinagreRdpTabPrivate
   gboolean         scaling;
   double           scale;
   gint             offset_x, offset_y;
+
+  guint            authentication_attempts;
+  gboolean         authentication_cancelled;
 };
 
 G_DEFINE_TYPE (VinagreRdpTab, vinagre_rdp_tab, VINAGRE_TYPE_TAB)
@@ -889,126 +892,81 @@ frdp_mouse_moved (GtkWidget      *widget,
   return TRUE;
 }
 
-static void
-entry_text_changed_cb (GtkEntry   *entry,
-                       GtkBuilder *builder)
-{
-  const gchar *text;
-  GtkWidget   *widget;
-  gsize        username_length;
-  gsize        password_length;
-
-  widget = GTK_WIDGET (gtk_builder_get_object (builder, "username_entry"));
-  text = gtk_entry_get_text (GTK_ENTRY (widget));
-  username_length = strlen (text);
-
-  widget = GTK_WIDGET (gtk_builder_get_object (builder, "password_entry"));
-  text = gtk_entry_get_text (GTK_ENTRY (widget));
-  password_length = strlen (text);
-
-  widget = GTK_WIDGET (gtk_builder_get_object (builder, "ok_button"));
-  gtk_widget_set_sensitive (widget, password_length > 0 && username_length > 0);
-}
-
 static gboolean
 frdp_authenticate (freerdp  *instance,
                    char    **username,
                    char    **password,
                    char    **domain)
 {
-  VinagreTab        *tab = VINAGRE_TAB (((frdpContext *) instance->context)->rdp_tab);
-  VinagreConnection *conn = vinagre_tab_get_conn (tab);
-  const gchar       *user_name;
-  const gchar       *domain_name;
-  GtkBuilder        *builder;
-  GtkWidget         *dialog;
-  GtkWidget         *widget;
-  GtkWidget         *username_entry;
-  GtkWidget         *password_entry;
-  GtkWidget         *domain_entry;
-  gboolean           domain_label_visible;
-  gboolean           domain_entry_visible;
-  gchar             *keyring_username = NULL;
-  gchar             *keyring_password = NULL;
-  gint               response;
-
-  vinagre_tab_find_credentials_in_keyring (tab, &keyring_username, &keyring_password);
-  if (keyring_username != NULL &&
-      keyring_password != NULL)
-    {
-      *username = g_strdup (keyring_username);
-      *password = g_strdup (keyring_password);
-
-      return TRUE;
-    }
-  else
-    {
-      builder = vinagre_utils_get_builder ();
-
-      dialog = GTK_WIDGET (gtk_builder_get_object (builder, "auth_required_dialog"));
-      gtk_window_set_modal ((GtkWindow *) dialog, TRUE);
-      gtk_window_set_transient_for ((GtkWindow *) dialog, GTK_WINDOW (vinagre_tab_get_window (tab)));
-
-      widget = GTK_WIDGET (gtk_builder_get_object (builder, "host_label"));
-      gtk_label_set_text (GTK_LABEL (widget), vinagre_connection_get_host (conn));
-
-      username_entry = GTK_WIDGET (gtk_builder_get_object (builder, "username_entry"));
-      password_entry = GTK_WIDGET (gtk_builder_get_object (builder, "password_entry"));
-      domain_entry = GTK_WIDGET (gtk_builder_get_object (builder, "domain_entry"));
-
-      if (*username != NULL && *username[0] != '\0')
-        {
-          gtk_entry_set_text (GTK_ENTRY (username_entry), *username);
-          gtk_widget_grab_focus (password_entry);
-        }
-
-      g_signal_connect (username_entry, "changed", G_CALLBACK (entry_text_changed_cb), builder);
-      g_signal_connect (password_entry, "changed", G_CALLBACK (entry_text_changed_cb), builder);
-
-
-      widget = GTK_WIDGET (gtk_builder_get_object (builder, "domain_label"));
-      domain_label_visible = gtk_widget_get_visible (widget);
-      gtk_widget_set_visible (widget, TRUE);
-
-      domain_entry_visible = gtk_widget_get_visible (domain_entry);
-      gtk_widget_set_visible (domain_entry, TRUE);
-
-
-      response = gtk_dialog_run (GTK_DIALOG (dialog));
-      gtk_widget_hide (dialog);
-
-
-      widget = GTK_WIDGET (gtk_builder_get_object (builder, "domain_label"));
-      gtk_widget_set_visible (widget, domain_label_visible);
+  VinagreTab           *tab = VINAGRE_TAB (((frdpContext *) instance->context)->rdp_tab);
+  VinagreRdpTab        *rdp_tab = VINAGRE_RDP_TAB (tab);
+  VinagreRdpTabPrivate *priv = rdp_tab->priv;
+  VinagreConnection    *conn = vinagre_tab_get_conn (tab);
+  gchar                *keyring_domain = NULL;
+  gchar                *keyring_username = NULL;
+  gchar                *keyring_password = NULL;
+  const gchar          *conn_domain;
+  const gchar          *conn_username;
 
-      gtk_widget_set_visible (domain_entry, domain_entry_visible);
+  priv->authentication_attempts++;
 
-      if (response == GTK_RESPONSE_OK)
+  if (priv->authentication_attempts == 1)
+    {
+      vinagre_tab_find_credentials_with_domain_in_keyring (tab, &keyring_domain, &keyring_username, &keyring_password);
+      if (keyring_password != NULL && keyring_username != NULL)
         {
-          domain_name = gtk_entry_get_text (GTK_ENTRY (domain_entry));
-          if (g_strcmp0 (*domain, domain_name) != 0)
-            *domain = g_strdup (domain_name);
-
-          user_name = gtk_entry_get_text (GTK_ENTRY (username_entry));
-          if (g_strcmp0 (*username, user_name) != 0)
-            {
-              *username = g_strdup (user_name);
-              vinagre_connection_set_username (conn, *username);
-            }
-
-          *password = g_strdup (gtk_entry_get_text (GTK_ENTRY (password_entry)));
-          vinagre_connection_set_password (conn, *password);
-
-          vinagre_tab_set_save_credentials (tab,
-                                            gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (gtk_builder_get_object (builder, "save_credential_check"))));
+          *domain = keyring_domain;
+          *username = keyring_username;
+          *password = keyring_password;
 
           return TRUE;
         }
       else
         {
-          return FALSE;
+          g_free (keyring_domain);
+          g_free (keyring_username);
+          g_free (keyring_password);
+
+
+          g_free (*domain);
+          *domain = NULL;
+          conn_domain = vinagre_connection_get_domain (conn);
+          if (conn_domain != NULL && conn_domain[0] != '\0')
+            *domain = g_strdup (conn_domain);
+
+          g_free (*username);
+          *username = NULL;
+          conn_username = vinagre_connection_get_username (conn);
+          if (conn_username != NULL && conn_username[0] != '\0')
+            *username = g_strdup (conn_username);
         }
     }
+
+  if (vinagre_tab_request_credential (tab,
+                                      TRUE,
+                                      TRUE,
+                                      TRUE,
+                                      domain,
+                                      username,
+                                      password))
+    {
+      if (*domain && **domain != '\0')
+        vinagre_connection_set_domain (conn, *domain);
+
+      if (*username && **username != '\0')
+        vinagre_connection_set_username (conn, *username);
+
+      if (*password && **password != '\0')
+        vinagre_connection_set_password (conn, *password);
+    }
+  else
+    {
+      priv->authentication_cancelled = TRUE;
+
+      return FALSE;
+    }
+
+  return TRUE;
 }
 
 static BOOL
@@ -1105,30 +1063,25 @@ frdp_changed_certificate_verify (freerdp *instance,
 #endif
 
 static void
-open_freerdp (VinagreRdpTab *rdp_tab)
+init_freerdp (VinagreRdpTab *rdp_tab)
 {
   VinagreRdpTabPrivate *priv = rdp_tab->priv;
+  rdpSettings          *settings;
   VinagreTab           *tab = VINAGRE_TAB (rdp_tab);
   VinagreConnection    *conn = vinagre_tab_get_conn (tab);
-  rdpSettings          *settings;
-  GtkWindow            *window = GTK_WINDOW (vinagre_tab_get_window (tab));
-  gboolean              success = TRUE;
-  gboolean              fullscreen, scaling;
-  gchar                *hostname, *username;
-  gint                  port, width, height;
+  gboolean              scaling;
+  gchar                *hostname;
+  gint                  width, height;
+  gint                  port;
 
   g_object_get (conn,
                 "port", &port,
                 "host", &hostname,
                 "width", &width,
                 "height", &height,
-                "fullscreen", &fullscreen,
                 "scaling", &scaling,
-                "username", &username,
                 NULL);
 
-  priv->events = g_queue_new ();
-
   /* Setup FreeRDP session */
   priv->freerdp_session = freerdp_new ();
   priv->freerdp_session->PreConnect = frdp_pre_connect;
@@ -1200,23 +1153,30 @@ open_freerdp (VinagreRdpTab *rdp_tab)
   settings->port = port;
 #endif
 
-  /* Set username */
-  username = g_strstrip (username);
-  if (username != NULL && username[0] != '\0')
-    {
-#if HAVE_FREERDP_1_1
-      settings->Username = g_strdup (username);
-#else
-      settings->username = g_strdup (username);
-#endif
-    }
-
   /* Set keyboard layout */
 #if HAVE_FREERDP_1_1
   freerdp_keyboard_init (KBD_US);
 #else
   freerdp_kbd_init (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), KBD_US);
 #endif
+}
+
+static void
+init_display (VinagreRdpTab *rdp_tab)
+{
+  VinagreRdpTabPrivate *priv = rdp_tab->priv;
+  VinagreTab           *tab = VINAGRE_TAB (rdp_tab);
+  VinagreConnection    *conn = vinagre_tab_get_conn (tab);
+  GtkWindow            *window = GTK_WINDOW (vinagre_tab_get_window (tab));
+  gboolean              fullscreen, scaling;
+  gint                  width, height;
+
+  g_object_get (conn,
+                "width", &width,
+                "height", &height,
+                "fullscreen", &fullscreen,
+                "scaling", &scaling,
+                NULL);
 
   /* Setup display for FreeRDP session */
   priv->display = gtk_drawing_area_new ();
@@ -1267,22 +1227,52 @@ open_freerdp (VinagreRdpTab *rdp_tab)
   priv->key_release_handler_id = g_signal_connect (window, "key-release-event",
                                                    G_CALLBACK (frdp_key_pressed),
                                                    rdp_tab);
+}
+
+static void
+open_freerdp (VinagreRdpTab *rdp_tab)
+{
+  VinagreRdpTabPrivate *priv = rdp_tab->priv;
+  VinagreTab           *tab = VINAGRE_TAB (rdp_tab);
+  GtkWindow            *window = GTK_WINDOW (vinagre_tab_get_window (tab));
+  gboolean              success = TRUE;
+
+  priv->events = g_queue_new ();
+
+  init_freerdp (rdp_tab);
+  init_display (rdp_tab);
 
-  /* Run FreeRDP session */
-  success = freerdp_connect (priv->freerdp_session);
+  priv->authentication_cancelled = FALSE;
+
+  do
+    {
+      /* Run FreeRDP session */
+      success = freerdp_connect (priv->freerdp_session);
+      if (!success)
+        {
+          freerdp_free (priv->freerdp_session);
+          init_freerdp (rdp_tab);
+        }
+    }
+  while (!success &&
+         priv->authentication_attempts < 3 &&
+         !priv->authentication_cancelled);
 
   if (!success)
     {
       gtk_window_unfullscreen (window);
-      vinagre_utils_show_error (NULL,
-                                _("Error connecting to host."),
-                                window);
+      if (!priv->authentication_cancelled)
+        vinagre_utils_show_error (NULL,
+                                  _("Error connecting to host."),
+                                  window);
       g_idle_add ((GSourceFunc) idle_close, rdp_tab);
     }
   else
     {
       priv->update_id = g_idle_add ((GSourceFunc) update, rdp_tab);
     }
+
+  priv->authentication_attempts = 0;
 }
 
 static void
--- a/plugins/vnc/vinagre-vnc-tab.c
+++ b/plugins/vnc/vinagre-vnc-tab.c
@@ -395,111 +395,6 @@ vnc_initialized_cb (VncDisplay *vnc, VinagreVncTab *vnc_tab)
   g_signal_emit_by_name (G_OBJECT (tab), "tab-initialized");
 }
 
-typedef struct {
-  GtkWidget *uname, *pw, *button;
-} ControlOKButton;
-
-static void
-control_ok_button (GtkEditable *entry, ControlOKButton *data)
-{
-  gboolean enabled = TRUE;
-
-  if (GTK_WIDGET_VISIBLE (data->uname))
-    enabled = enabled && gtk_entry_get_text_length (GTK_ENTRY (data->uname)) > 0;
-
-  if (GTK_WIDGET_VISIBLE (data->pw))
-    enabled = enabled && gtk_entry_get_text_length (GTK_ENTRY (data->pw)) > 0;
-
-  gtk_widget_set_sensitive (data->button, enabled);
-}
-
-static gboolean
-ask_credential (VinagreVncTab *vnc_tab,
-		gboolean      need_username,
-		gboolean      need_password,
-		gchar         **username,
-		gchar         **password)
-{
-  GtkBuilder      *xml;
-  GtkWidget       *password_dialog, *host_label, *save_credential_check;
-  GtkWidget       *password_label, *username_label, *image;
-  gchar           *name;
-  int             result;
-  ControlOKButton control;
-  VinagreTab      *tab = VINAGRE_TAB (vnc_tab);
-  VinagreConnection *conn = vinagre_tab_get_conn (tab);
-
-  xml = vinagre_utils_get_builder ();
-
-  password_dialog = GTK_WIDGET (gtk_builder_get_object (xml, "auth_required_dialog"));
-  gtk_window_set_transient_for (GTK_WINDOW(password_dialog),
-				GTK_WINDOW(vinagre_tab_get_window (tab)));
-
-  host_label = GTK_WIDGET (gtk_builder_get_object (xml, "host_label"));
-  name = vinagre_connection_get_best_name (conn);
-  gtk_label_set_label (GTK_LABEL (host_label), name);
-  g_free (name);
-
-  control.uname  = GTK_WIDGET (gtk_builder_get_object (xml, "username_entry"));
-  control.pw     = GTK_WIDGET (gtk_builder_get_object (xml, "password_entry"));
-  control.button = GTK_WIDGET (gtk_builder_get_object (xml, "ok_button"));
-  password_label = GTK_WIDGET (gtk_builder_get_object (xml, "password_label"));
-  username_label = GTK_WIDGET (gtk_builder_get_object (xml, "username_label"));
-  save_credential_check = GTK_WIDGET (gtk_builder_get_object (xml, "save_credential_check"));
-
-  image = gtk_image_new_from_stock (GTK_STOCK_DIALOG_AUTHENTICATION, GTK_ICON_SIZE_BUTTON);
-  gtk_button_set_image (GTK_BUTTON (control.button), image);
-
-  g_signal_connect (control.uname, "changed", G_CALLBACK (control_ok_button), &control);
-  g_signal_connect (control.pw, "changed", G_CALLBACK (control_ok_button), &control);
-
-  if (need_username)
-    {
-      if (*username)
-        gtk_entry_set_text (GTK_ENTRY (control.uname), *username);
-    }
-  else
-    {
-      gtk_widget_hide (username_label);
-      gtk_widget_hide (control.uname);
-    }
-
-  if (need_password)
-    {
-      if (*password)
-        gtk_entry_set_text (GTK_ENTRY (control.pw), *password);
-    }
-  else
-    {
-      gtk_widget_hide (password_label);
-      gtk_widget_hide (control.pw);
-    }
-
-  result = gtk_dialog_run (GTK_DIALOG (password_dialog));
-  if (result == -5)
-    {
-      g_free (*username);
-      if (gtk_entry_get_text_length (GTK_ENTRY (control.uname)) > 0)
-	*username = g_strdup (gtk_entry_get_text (GTK_ENTRY (control.uname)));
-      else
-	*username = NULL;
-
-      g_free (*password);
-      if (gtk_entry_get_text_length (GTK_ENTRY (control.pw)) > 0)
-	*password = g_strdup (gtk_entry_get_text (GTK_ENTRY (control.pw)));
-      else
-	*password = NULL;
-
-      vinagre_tab_set_save_credentials (tab,
-					gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (save_credential_check)));
-    }
-
-  gtk_widget_destroy (GTK_WIDGET (password_dialog));
-  g_object_unref (xml);
-
-  return result == -5;
-}
-
 static void
 vnc_authentication_cb (VncDisplay *vnc, GValueArray *credList, VinagreVncTab *vnc_tab)
 {
@@ -550,7 +445,13 @@ vnc_authentication_cb (VncDisplay *vnc, GValueArray *credList, VinagreVncTab *vn
       vinagre_tab_find_credentials_in_keyring (tab, &username, &password);
       if ( (need_username && !username) || (need_password && !password) )
 	{
-	  if (!ask_credential (vnc_tab, need_username, need_password, &username, &password))
+	  if (!vinagre_tab_request_credential (tab,
+	                                       FALSE,
+	                                       need_username,
+	                                       need_password,
+	                                       NULL,
+	                                       &username,
+	                                       &password))
 	    {
 	      vinagre_tab_remove_from_notebook (tab);
 	      goto out;
--- a/vinagre/vinagre-connection.c
+++ b/vinagre/vinagre-connection.c
@@ -28,6 +28,7 @@
 #include "vinagre-bookmarks.h"
 #include "vinagre-plugin.h"
 #include "vinagre-plugins-engine.h"
+#include "vinagre-utils.h"
 
 #define DEFAULT_WIDTH   800
 #define DEFAULT_HEIGHT  600
@@ -39,6 +40,7 @@ struct _VinagreConnectionPrivate
   gchar *protocol;
   gchar *host;
   gint   port;
+  gchar *domain;
   gchar *username;
   gchar *password;
   gchar *name;
@@ -53,6 +55,7 @@ enum
   PROP_PROTOCOL,
   PROP_HOST,
   PROP_PORT,
+  PROP_DOMAIN,
   PROP_USERNAME,
   PROP_PASSWORD,
   PROP_NAME,
@@ -75,6 +78,7 @@ vinagre_connection_init (VinagreConnection *conn)
   conn->priv->port = 0;
   conn->priv->password = NULL;
   conn->priv->username = NULL;
+  conn->priv->domain = NULL;
   conn->priv->name = NULL;
   conn->priv->fullscreen = FALSE;
   conn->priv->width = DEFAULT_WIDTH;
@@ -88,6 +92,7 @@ vinagre_connection_finalize (GObject *object)
 
   g_free (conn->priv->protocol);
   g_free (conn->priv->host);
+  g_free (conn->priv->domain);
   g_free (conn->priv->username);
   g_free (conn->priv->password);
   g_free (conn->priv->name);
@@ -118,6 +123,10 @@ vinagre_connection_set_property (GObject *object, guint prop_id, const GValue *v
 	vinagre_connection_set_port (conn, g_value_get_int (value));
 	break;
 
+      case PROP_DOMAIN:
+	vinagre_connection_set_domain (conn, g_value_get_string (value));
+	break;
+
       case PROP_USERNAME:
 	vinagre_connection_set_username (conn, g_value_get_string (value));
 	break;
@@ -172,6 +181,10 @@ vinagre_connection_get_property (GObject *object, guint prop_id, GValue *value,
 	g_value_set_int (value, conn->priv->port);
 	break;
 
+      case PROP_DOMAIN:
+	g_value_set_string (value, conn->priv->domain);
+	break;
+
       case PROP_USERNAME:
 	g_value_set_string (value, conn->priv->username);
 	break;
@@ -319,7 +332,19 @@ vinagre_connection_class_init (VinagreConnectionClass *klass)
                                                       G_PARAM_STATIC_BLURB));
 
   g_object_class_install_property (object_class,
-                                   PROP_NAME,
+                                   PROP_DOMAIN,
+                                   g_param_spec_string ("domain",
+                                                        "domain",
+                                                        "domain (if any) necessary for complete this connection",
+                                                        NULL,
+                                                        G_PARAM_READWRITE |
+                                                        G_PARAM_CONSTRUCT |
+                                                        G_PARAM_STATIC_NICK |
+                                                        G_PARAM_STATIC_NAME |
+                                                        G_PARAM_STATIC_BLURB));
+
+  g_object_class_install_property (object_class,
+                                   PROP_USERNAME,
                                    g_param_spec_string ("username",
                                                         "username",
 	                                                "username (if any) necessary for complete this connection",
@@ -454,6 +479,23 @@ vinagre_connection_get_port (VinagreConnection *conn)
 }
 
 void
+vinagre_connection_set_domain (VinagreConnection *conn,
+			       const gchar *domain)
+{
+  g_return_if_fail (VINAGRE_IS_CONNECTION (conn));
+
+  g_free (conn->priv->domain);
+  conn->priv->domain = g_strdup (domain);
+}
+const gchar *
+vinagre_connection_get_domain (VinagreConnection *conn)
+{
+  g_return_val_if_fail (VINAGRE_IS_CONNECTION (conn), NULL);
+
+  return conn->priv->domain;
+}
+
+void
 vinagre_connection_set_username (VinagreConnection *conn,
 			     const gchar *username)
 {
--- a/vinagre/vinagre-connection.h
+++ b/vinagre/vinagre-connection.h
@@ -72,6 +72,10 @@ gint		    vinagre_connection_get_port		(VinagreConnection *conn);
 void		    vinagre_connection_set_port		(VinagreConnection *conn,
 							 gint port);
 
+const gchar*	    vinagre_connection_get_domain	(VinagreConnection *conn);
+void		    vinagre_connection_set_domain	(VinagreConnection *conn,
+							 const gchar *domain);
+
 const gchar*	    vinagre_connection_get_username	(VinagreConnection *conn);
 void		    vinagre_connection_set_username	(VinagreConnection *conn,
 							 const gchar *username);
--- a/vinagre/vinagre-tab.c
+++ b/vinagre/vinagre-tab.c
@@ -686,19 +686,22 @@ vinagre_tab_find_credentials_in_keyring (VinagreTab *tab, gchar **username, gcha
   GnomeKeyringNetworkPasswordData *found_item;
   GnomeKeyringResult               result;
   GList                           *matches;
+  const gchar                     *conn_user;
   
   matches   = NULL;
   *username = NULL;
   *password = NULL;
 
+  conn_user = vinagre_connection_get_username (tab->priv->conn);
+
   result = gnome_keyring_find_network_password_sync (
-                vinagre_connection_get_username (tab->priv->conn),            /* user     */
-		NULL,                                                         /* domain   */
-		vinagre_connection_get_host (tab->priv->conn),                /* server   */
-		NULL,                                                         /* object   */
-		vinagre_connection_get_protocol (tab->priv->conn),            /* protocol */
-		NULL,                                                         /* authtype */
-		vinagre_connection_get_port (tab->priv->conn),                /* port     */
+                conn_user != NULL && conn_user[0] != '\0' ? conn_user : NULL,          /* user     */
+		NULL,                                                                  /* domain   */
+		vinagre_connection_get_host (tab->priv->conn),                         /* server   */
+		NULL,                                                                  /* object   */
+		vinagre_connection_get_protocol (tab->priv->conn),                     /* protocol */
+		NULL,                                                                  /* authtype */
+		vinagre_connection_get_port (tab->priv->conn),                         /* port     */
 		&matches);
 
   if (result != GNOME_KEYRING_RESULT_OK || matches == NULL || matches->data == NULL)
@@ -716,6 +719,52 @@ vinagre_tab_find_credentials_in_keyring (VinagreTab *tab, gchar **username, gcha
   return TRUE;
 }
 
+gboolean
+vinagre_tab_find_credentials_with_domain_in_keyring (VinagreTab  *tab,
+                                                     gchar      **domain,
+                                                     gchar      **username,
+                                                     gchar      **password)
+{
+  GnomeKeyringNetworkPasswordData *found_item;
+  GnomeKeyringResult               result;
+  GList                           *matches;
+  const gchar                     *conn_domain;
+  const gchar                     *conn_user;
+  
+  matches   = NULL;
+  *domain   = NULL;
+  *username = NULL;
+  *password = NULL;
+
+  conn_domain = vinagre_connection_get_domain (tab->priv->conn);
+  conn_user = vinagre_connection_get_username (tab->priv->conn);
+
+  result = gnome_keyring_find_network_password_sync (
+                conn_user != NULL && conn_user[0] != '\0' ? conn_user : NULL,          /* user     */
+		conn_domain != NULL && conn_domain[0] != '\0' ? conn_domain : NULL,    /* domain   */
+		vinagre_connection_get_host (tab->priv->conn),                         /* server   */
+		NULL,                                                                  /* object   */
+		vinagre_connection_get_protocol (tab->priv->conn),                     /* protocol */
+		NULL,                                                                  /* authtype */
+		vinagre_connection_get_port (tab->priv->conn),                         /* port     */
+		&matches);
+
+  if (result != GNOME_KEYRING_RESULT_OK || matches == NULL || matches->data == NULL)
+    return FALSE;
+
+  found_item = (GnomeKeyringNetworkPasswordData *) matches->data;
+
+  *domain = g_strdup (found_item->domain);
+  *username = g_strdup (found_item->user);
+  *password = g_strdup (found_item->password);
+  
+  tab->priv->keyring_item_id = found_item->item_id;
+
+  gnome_keyring_network_password_list_free (matches);
+
+  return TRUE;
+}
+
 void vinagre_tab_set_save_credentials (VinagreTab *tab, gboolean value)
 {
   tab->priv->save_credentials = value;
@@ -725,20 +774,25 @@ void
 vinagre_tab_save_credentials_in_keyring (VinagreTab *tab)
 {
   GnomeKeyringResult result;
+  const gchar *conn_domain;
+  const gchar *conn_user;
 
   if (!tab->priv->save_credentials)
     return;
 
+  conn_domain = vinagre_connection_get_domain (tab->priv->conn);
+  conn_user = vinagre_connection_get_username (tab->priv->conn);
+
   result = gnome_keyring_set_network_password_sync (
-                NULL,                                                        /* default keyring */
-                vinagre_connection_get_username (tab->priv->conn),           /* user            */
-                NULL,                                                        /* domain          */
-                vinagre_connection_get_host (tab->priv->conn),               /* server          */
-                NULL,                                                        /* object          */
-                vinagre_connection_get_protocol (tab->priv->conn),           /* protocol        */
-                NULL,                                                        /* authtype        */
-                vinagre_connection_get_port (tab->priv->conn),               /* port            */
-                vinagre_connection_get_password (tab->priv->conn),           /* password        */
+                NULL,                                                                  /* default keyring */
+                conn_user != NULL && conn_user[0] != '\0' ? conn_user : NULL,          /* user            */
+                conn_domain != NULL && conn_domain[0] != '\0' ? conn_domain : NULL,    /* domain          */
+                vinagre_connection_get_host (tab->priv->conn),                         /* server          */
+                NULL,                                                                  /* object          */
+                vinagre_connection_get_protocol (tab->priv->conn),                     /* protocol        */
+                NULL,                                                                  /* authtype        */
+                vinagre_connection_get_port (tab->priv->conn),                         /* port            */
+                vinagre_connection_get_password (tab->priv->conn),                     /* password        */
                 &tab->priv->keyring_item_id);
 
   if (result != GNOME_KEYRING_RESULT_OK)
@@ -751,6 +805,7 @@ vinagre_tab_save_credentials_in_keyring (VinagreTab *tab)
 
 void vinagre_tab_remove_credentials_from_keyring (VinagreTab *tab)
 {
+  vinagre_connection_set_domain (tab->priv->conn, NULL);
   vinagre_connection_set_username (tab->priv->conn, NULL);
   vinagre_connection_set_password (tab->priv->conn, NULL);
 
@@ -964,4 +1019,142 @@ vinagre_tab_get_icon_name (VinagreTab *tab)
   return vinagre_plugin_get_icon_name (plugin);
 }
 
+typedef struct {
+  GtkWidget *domain, *uname, *pw, *button;
+} ControlOKButton;
+
+static void
+control_ok_button (GtkEditable *entry, ControlOKButton *data)
+{
+  gboolean enabled = TRUE;
+
+  if (GTK_WIDGET_VISIBLE (data->uname))
+    enabled = enabled && gtk_entry_get_text_length (GTK_ENTRY (data->uname)) > 0;
+
+  if (GTK_WIDGET_VISIBLE (data->pw))
+    enabled = enabled && gtk_entry_get_text_length (GTK_ENTRY (data->pw)) > 0;
+
+  gtk_widget_set_sensitive (data->button, enabled);
+}
+
+gboolean
+vinagre_tab_request_credential (VinagreTab  *tab,
+				gboolean     need_domain,
+				gboolean     need_username,
+				gboolean     need_password,
+				gchar      **domain,
+				gchar      **username,
+				gchar      **password)
+{
+  GtkBuilder        *xml;
+  GtkWidget         *password_dialog, *host_label, *save_credential_check;
+  GtkWidget         *domain_label, *password_label, *username_label, *image;
+  gchar             *name;
+  int                result;
+  ControlOKButton    control;
+  VinagreConnection *conn = vinagre_tab_get_conn (tab);
+
+  xml = vinagre_utils_get_builder ();
+
+  password_dialog = GTK_WIDGET (gtk_builder_get_object (xml, "auth_required_dialog"));
+  gtk_window_set_transient_for (GTK_WINDOW(password_dialog),
+				GTK_WINDOW(vinagre_tab_get_window (tab)));
+
+  host_label = GTK_WIDGET (gtk_builder_get_object (xml, "host_label"));
+  name = vinagre_connection_get_best_name (conn);
+  gtk_label_set_label (GTK_LABEL (host_label), name);
+  g_free (name);
+
+  control.domain = GTK_WIDGET (gtk_builder_get_object (xml, "domain_entry"));
+  control.uname  = GTK_WIDGET (gtk_builder_get_object (xml, "username_entry"));
+  control.pw     = GTK_WIDGET (gtk_builder_get_object (xml, "password_entry"));
+  control.button = GTK_WIDGET (gtk_builder_get_object (xml, "ok_button"));
+  password_label = GTK_WIDGET (gtk_builder_get_object (xml, "password_label"));
+  username_label = GTK_WIDGET (gtk_builder_get_object (xml, "username_label"));
+  domain_label = GTK_WIDGET (gtk_builder_get_object (xml, "domain_label"));
+  save_credential_check = GTK_WIDGET (gtk_builder_get_object (xml, "save_credential_check"));
+
+  image = gtk_image_new_from_stock (GTK_STOCK_DIALOG_AUTHENTICATION, GTK_ICON_SIZE_BUTTON);
+  gtk_button_set_image (GTK_BUTTON (control.button), image);
+
+  g_signal_connect (control.uname, "changed", G_CALLBACK (control_ok_button), &control);
+  g_signal_connect (control.pw, "changed", G_CALLBACK (control_ok_button), &control);
+
+  if (need_domain)
+    {
+      if (*domain)
+        gtk_entry_set_text (GTK_ENTRY (control.domain), *domain);
+    }
+  else
+    {
+      gtk_widget_hide (domain_label);
+      gtk_widget_hide (control.domain);
+    }
+
+  if (need_username)
+    {
+      if (*username)
+        {
+          gtk_entry_set_text (GTK_ENTRY (control.uname), *username);
+          if (need_password)
+            gtk_widget_grab_focus (control.pw);
+        }
+    }
+  else
+    {
+      gtk_widget_hide (username_label);
+      gtk_widget_hide (control.uname);
+    }
+
+  if (need_password)
+    {
+      if (*password)
+        gtk_entry_set_text (GTK_ENTRY (control.pw), *password);
+    }
+  else
+    {
+      gtk_widget_hide (password_label);
+      gtk_widget_hide (control.pw);
+    }
+
+  result = gtk_dialog_run (GTK_DIALOG (password_dialog));
+  if (result == GTK_RESPONSE_OK)
+    {
+      if (need_domain)
+        {
+          g_free (*domain);
+          if (gtk_entry_get_text_length (GTK_ENTRY (control.domain)) > 0)
+	    *domain = g_strdup (gtk_entry_get_text (GTK_ENTRY (control.domain)));
+          else
+	    *domain = NULL;
+        }
+
+      if (need_username)
+        {
+          g_free (*username);
+          if (gtk_entry_get_text_length (GTK_ENTRY (control.uname)) > 0)
+	    *username = g_strdup (gtk_entry_get_text (GTK_ENTRY (control.uname)));
+          else
+	    *username = NULL;
+        }
+
+      if (need_password)
+        {
+          g_free (*password);
+          if (gtk_entry_get_text_length (GTK_ENTRY (control.pw)) > 0)
+	    *password = g_strdup (gtk_entry_get_text (GTK_ENTRY (control.pw)));
+          else
+	    *password = NULL;
+        }
+
+      vinagre_tab_set_save_credentials (tab,
+					gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (save_credential_check)));
+    }
+
+  gtk_widget_destroy (GTK_WIDGET (password_dialog));
+  g_object_unref (xml);
+
+  return result == GTK_RESPONSE_OK;
+}
+
 /* vim: set ts=8: */
--- a/vinagre/vinagre-tab.h
+++ b/vinagre/vinagre-tab.h
@@ -127,6 +127,10 @@ void			vinagre_tab_save_credentials_in_keyring (VinagreTab *tab);
 gboolean		vinagre_tab_find_credentials_in_keyring	(VinagreTab *tab,
 								 gchar **username,
 								 gchar **password);
+gboolean		vinagre_tab_find_credentials_with_domain_in_keyring	(VinagreTab *tab,
+										 gchar **domain,
+										 gchar **username,
+										 gchar **password);
 void			vinagre_tab_remove_credentials_from_keyring (VinagreTab *tab);
 
 void			vinagre_tab_remove_from_notebook	(VinagreTab *tab);
@@ -140,6 +144,13 @@ void			vinagre_tab_add_actions			(VinagreTab *tab,
 void			vinagre_tab_add_toggle_actions		(VinagreTab *tab,
 								 const GtkToggleActionEntry *entries,
 								 guint n_entries);
+gboolean		vinagre_tab_request_credential		(VinagreTab  *tab,
+								 gboolean     need_domain,
+								 gboolean     need_username,
+								 gboolean     need_password,
+								 gchar      **domain,
+								 gchar      **username,
+								 gchar      **password);
 G_END_DECLS
 
 #endif  /* __VINAGRE_TAB_H__  */
