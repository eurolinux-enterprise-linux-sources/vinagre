--- a/plugins/rdp/vinagre-rdp-connection.c
+++ b/plugins/rdp/vinagre-rdp-connection.c
@@ -20,11 +20,18 @@
  */
 
 #include <glib/gi18n.h>
+#include <vinagre/vinagre-utils.h>
 #include "vinagre-rdp-connection.h"
 
 struct _VinagreRdpConnectionPrivate
 {
-  gint dummy;
+  gboolean scaling;
+};
+
+enum
+{
+  PROP_0,
+  PROP_SCALING,
 };
 
 #define VINAGRE_RDP_CONNECTION_PRIVATE(o)  (G_TYPE_INSTANCE_GET_PRIVATE ((o), VINAGRE_TYPE_RDP_CONNECTION, VinagreRdpConnectionPrivate))
@@ -43,15 +50,76 @@ vinagre_rdp_connection_constructed (GObject *object)
 }
 
 static void
+vinagre_rdp_connection_set_property (GObject *object, guint prop_id, const GValue *value, GParamSpec *pspec)
+{
+  VinagreRdpConnection *conn;
+
+  g_return_if_fail (VINAGRE_IS_RDP_CONNECTION (object));
+
+  conn = VINAGRE_RDP_CONNECTION (object);
+
+  switch (prop_id)
+    {
+      case PROP_SCALING:
+        vinagre_rdp_connection_set_scaling (conn, g_value_get_boolean (value));
+        break;
+
+      default:
+        G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+        break;
+    }
+}
+
+static void
+vinagre_rdp_connection_get_property (GObject *object, guint prop_id, GValue *value, GParamSpec *pspec)
+{
+  VinagreRdpConnection *conn;
+
+  g_return_if_fail (VINAGRE_IS_RDP_CONNECTION (object));
+
+  conn = VINAGRE_RDP_CONNECTION (object);
+
+  switch (prop_id)
+    {
+      case PROP_SCALING:
+        g_value_set_boolean (value, conn->priv->scaling);
+        break;
+
+      default:
+        G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+        break;
+    }
+}
+
+static void
 rdp_fill_writer (VinagreConnection *conn, xmlTextWriter *writer)
 {
+  VinagreRdpConnection *rdp_conn = VINAGRE_RDP_CONNECTION (conn);
   VINAGRE_CONNECTION_CLASS (vinagre_rdp_connection_parent_class)->impl_fill_writer (conn, writer);
+
+  xmlTextWriterWriteFormatElement (writer, BAD_CAST "scaling", "%d", rdp_conn->priv->scaling);
 }
 
 static void
 rdp_parse_item (VinagreConnection *conn, xmlNode *root)
 {
+  xmlNode *curr;
+  xmlChar *s_value;
+  VinagreRdpConnection *rdp_conn = VINAGRE_RDP_CONNECTION (conn);
+
   VINAGRE_CONNECTION_CLASS (vinagre_rdp_connection_parent_class)->impl_parse_item (conn, root);
+
+  for (curr = root->children; curr; curr = curr->next)
+    {
+      s_value = xmlNodeGetContent (curr);
+
+      if (!xmlStrcmp(curr->name, BAD_CAST "scaling"))
+        {
+          vinagre_rdp_connection_set_scaling (rdp_conn, vinagre_utils_parse_boolean ((const gchar *) s_value));
+        }
+
+      xmlFree (s_value);
+    }
 }
 
 static gchar *
@@ -73,7 +141,7 @@ rdp_get_best_name (VinagreConnection *conn)
 static void
 rdp_parse_options_widget (VinagreConnection *conn, GtkWidget *widget)
 {
-  GtkWidget *u_entry, *spin_button;
+  GtkWidget *u_entry, *spin_button, *scaling_button;
   guint      width, height;
 
   u_entry = g_object_get_data (G_OBJECT (widget), "username_entry");
@@ -110,6 +178,18 @@ rdp_parse_options_widget (VinagreConnection *conn, GtkWidget *widget)
   height = (guint) gtk_spin_button_get_value (GTK_SPIN_BUTTON (spin_button));
 
   vinagre_connection_set_height (conn, height);
+
+
+  scaling_button = g_object_get_data (G_OBJECT (widget), "scaling");
+  if (!scaling_button)
+    {
+      g_warning ("Wrong widget passed to rdp_parse_options_widget()");
+      return;
+    }
+
+  g_object_set (conn,
+                "scaling", gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (scaling_button)),
+                NULL);
 }
 
 static void
@@ -120,12 +200,25 @@ vinagre_rdp_connection_class_init (VinagreRdpConnectionClass *klass)
 
   g_type_class_add_private (klass, sizeof (VinagreRdpConnectionPrivate));
 
+  object_class->set_property = vinagre_rdp_connection_set_property;
+  object_class->get_property = vinagre_rdp_connection_get_property;
   object_class->constructed  = vinagre_rdp_connection_constructed;
 
   parent_class->impl_fill_writer = rdp_fill_writer;
   parent_class->impl_parse_item  = rdp_parse_item;
   parent_class->impl_get_best_name = rdp_get_best_name;
   parent_class->impl_parse_options_widget = rdp_parse_options_widget;
+
+  g_object_class_install_property (object_class,
+                                   PROP_SCALING,
+                                   g_param_spec_boolean ("scaling",
+                                                         "Use scaling",
+                                                         "Whether to use scaling on this connection",
+                                                         FALSE,
+                                                         G_PARAM_READWRITE |
+                                                         G_PARAM_CONSTRUCT |
+                                                         G_PARAM_STATIC_STRINGS));
+
 }
 
 VinagreConnection *
@@ -134,4 +227,22 @@ vinagre_rdp_connection_new (void)
   return VINAGRE_CONNECTION (g_object_new (VINAGRE_TYPE_RDP_CONNECTION, NULL));
 }
 
+void
+vinagre_rdp_connection_set_scaling (VinagreRdpConnection *conn,
+                                    gboolean              scaling)
+{
+  g_return_if_fail (VINAGRE_IS_RDP_CONNECTION (conn));
+
+  conn->priv->scaling = scaling;
+}
+
+gboolean
+vinagre_rdp_connection_get_scaling (VinagreRdpConnection *conn)
+{
+  g_return_val_if_fail (VINAGRE_IS_RDP_CONNECTION (conn), FALSE);
+
+  return conn->priv->scaling;
+}
+
+
 /* vim: set ts=8: */
--- a/plugins/rdp/vinagre-rdp-connection.h
+++ b/plugins/rdp/vinagre-rdp-connection.h
@@ -51,7 +51,11 @@ struct _VinagreRdpConnection
 
 GType vinagre_rdp_connection_get_type (void) G_GNUC_CONST;
 
-VinagreConnection*  vinagre_rdp_connection_new (void);
+VinagreConnection*  vinagre_rdp_connection_new         (void);
+
+gboolean            vinagre_rdp_connection_get_scaling (VinagreRdpConnection *conn);
+void                vinagre_rdp_connection_set_scaling (VinagreRdpConnection *conn,
+                                                        gboolean              scaling);
 
 G_END_DECLS
 
--- a/plugins/rdp/vinagre-rdp-plugin.c
+++ b/plugins/rdp/vinagre-rdp-plugin.c
@@ -143,7 +143,7 @@ vinagre_rdp_plugin_init (VinagreRdpPlugin *plugin)
 static GtkWidget *
 impl_get_connect_widget (VinagrePlugin *plugin, VinagreConnection *conn)
 {
-  GtkWidget *label, *u_entry, *spin_button;
+  GtkWidget *label, *u_entry, *spin_button, *check;
   GtkTable  *table;
   gchar     *str;
 
@@ -168,15 +168,25 @@ impl_get_connect_widget (VinagrePlugin *plugin, VinagreConnection *conn)
   gtk_table_attach (table, label, 0, 1, 0, 1, GTK_SHRINK, GTK_SHRINK, 0, 0);
 
 
+  /* Scaling check button */
+  check = gtk_check_button_new_with_mnemonic (_("_Scaling"));
+  g_object_set_data (G_OBJECT (table), "scaling", check);
+  gtk_table_attach_defaults (table, check, 1, 3, 2, 3);
+  if (VINAGRE_IS_CONNECTION (conn))
+    gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (check),
+                                  vinagre_rdp_connection_get_scaling (VINAGRE_RDP_CONNECTION (conn)));
+
+
+
   label = gtk_label_new_with_mnemonic (_("_Username:"));
   gtk_misc_set_alignment (GTK_MISC (label), 0.0, 0.5);
-  gtk_table_attach_defaults (table, label, 1, 2, 2, 3);
+  gtk_table_attach_defaults (table, label, 1, 2, 3, 4);
 
   u_entry = gtk_entry_new ();
   /* Translators: This is the tooltip for the username field in a RDP connection */
   gtk_widget_set_tooltip_text (u_entry, _("Optional. If blank, your username will be used. Also, it can be supplied in the Host field above, in the form username@hostname."));
   g_object_set_data (G_OBJECT (table), "username_entry", u_entry);
-  gtk_table_attach_defaults (table, u_entry, 2, 3, 2, 3);
+  gtk_table_attach_defaults (table, u_entry, 2, 3, 3, 4);
   gtk_label_set_mnemonic_widget (GTK_LABEL (label), u_entry);
   if (conn != NULL)
     gtk_entry_set_text (GTK_ENTRY (u_entry), vinagre_connection_get_username (conn));
@@ -186,14 +196,14 @@ impl_get_connect_widget (VinagrePlugin *plugin, VinagreConnection *conn)
   /* Host width */
   label = gtk_label_new_with_mnemonic (_("_Width:"));
   gtk_misc_set_alignment (GTK_MISC (label), 0.0, 0.5);
-  gtk_table_attach_defaults (table, label, 1, 2, 3, 4);
+  gtk_table_attach_defaults (table, label, 1, 2, 4, 5);
 
   spin_button = gtk_spin_button_new_with_range (MIN_SIZE, MAX_SIZE, 1);
   /* Translators: This is the tooltip for the width field in a RDP connection */
   gtk_widget_set_tooltip_text (spin_button, _("Set width of the remote desktop"));
   gtk_spin_button_set_value (GTK_SPIN_BUTTON (spin_button), DEFAULT_WIDTH);
   g_object_set_data (G_OBJECT (table), "width_spin_button", spin_button);
-  gtk_table_attach_defaults (table, spin_button, 2, 3, 3, 4);
+  gtk_table_attach_defaults (table, spin_button, 2, 3, 4, 5);
   gtk_label_set_mnemonic_widget (GTK_LABEL (label), spin_button);
   gtk_entry_set_activates_default (GTK_ENTRY (spin_button), TRUE);
 
@@ -201,14 +211,14 @@ impl_get_connect_widget (VinagrePlugin *plugin, VinagreConnection *conn)
   /* Host height */
   label = gtk_label_new_with_mnemonic (_("_Height:"));
   gtk_misc_set_alignment (GTK_MISC (label), 0.0, 0.5);
-  gtk_table_attach_defaults (table, label, 1, 2, 4, 5);
+  gtk_table_attach_defaults (table, label, 1, 2, 5, 6);
 
   spin_button = gtk_spin_button_new_with_range (MIN_SIZE, MAX_SIZE, 1);
   /* Translators: This is the tooltip for the height field in a RDP connection */
   gtk_widget_set_tooltip_text (spin_button, _("Set height of the remote desktop"));
   gtk_spin_button_set_value (GTK_SPIN_BUTTON (spin_button), DEFAULT_HEIGHT);
   g_object_set_data (G_OBJECT (table), "height_spin_button", spin_button);
-  gtk_table_attach_defaults (table, spin_button, 2, 3, 4, 5);
+  gtk_table_attach_defaults (table, spin_button, 2, 3, 5, 6);
   gtk_label_set_mnemonic_widget (GTK_LABEL (label), spin_button);
   gtk_entry_set_activates_default (GTK_ENTRY (spin_button), TRUE);
 
--- a/plugins/rdp/vinagre-rdp-tab.c
+++ b/plugins/rdp/vinagre-rdp-tab.c
@@ -24,6 +24,7 @@
 #include <errno.h>
 #include <glib/gi18n.h>
 #include <gdk/gdkkeysyms.h>
+#include <math.h>
 #include <freerdp/api.h>
 #include <freerdp/types.h>
 #include <freerdp/freerdp.h>
@@ -63,11 +64,28 @@ struct _VinagreRdpTabPrivate
   guint            key_press_handler_id;
   guint            key_release_handler_id;
   guint            motion_notify_handler_id;
+
+  GSList          *connected_actions;
+  GtkWidget       *scaling_button;
+  GtkAction       *scaling_action;
+  gboolean         scaling;
+  double           scale;
+  gint             offset_x, offset_y;
 };
 
 G_DEFINE_TYPE (VinagreRdpTab, vinagre_rdp_tab, VINAGRE_TYPE_TAB)
 
 static void open_freerdp (VinagreRdpTab *rdp_tab);
+static void setup_toolbar (VinagreRdpTab *rdp_tab);
+static void vinagre_rdp_tab_set_scaling (VinagreRdpTab *tab,
+                                         gboolean       scaling);
+static void scaling_button_clicked (GtkToggleToolButton *button,
+                                    VinagreRdpTab       *rdp_tab);
+static gboolean draw_area (GtkWidget     *area,
+                           VinagreRdpTab *rdp_tab);
+static gboolean compute_offsets_and_scale (GtkWidget     *area,
+                                           VinagreRdpTab *rdp_tab);
+
 
 struct frdp_context
 {
@@ -129,12 +147,42 @@ free_frdpEvent (gpointer event,
 }
 
 static void
+view_scaling_cb (GtkAction     *action,
+                 VinagreRdpTab *rdp_tab)
+{
+  VinagreRdpTabPrivate *priv = rdp_tab->priv;
+  gboolean              scaling;
+
+  scaling = gtk_toggle_action_get_active (GTK_TOGGLE_ACTION (action));
+
+  vinagre_rdp_tab_set_scaling (rdp_tab, scaling);
+
+  g_signal_handlers_block_by_func (priv->scaling_button, scaling_button_clicked, rdp_tab);
+  gtk_toggle_tool_button_set_active (GTK_TOGGLE_TOOL_BUTTON (priv->scaling_button), scaling);
+  g_signal_handlers_unblock_by_func (priv->scaling_button, scaling_button_clicked, rdp_tab);
+}
+
+const static GSList *
+rdp_get_connected_actions (VinagreTab *tab)
+{
+  VinagreRdpTab *rdp_tab = VINAGRE_RDP_TAB (tab);
+
+  return rdp_tab->priv->connected_actions;
+}
+
+static void
 vinagre_rdp_tab_dispose (GObject *object)
 {
   VinagreRdpTab        *rdp_tab = VINAGRE_RDP_TAB (object);
   VinagreRdpTabPrivate *priv = rdp_tab->priv;
   GtkWindow            *window = GTK_WINDOW (vinagre_tab_get_window (VINAGRE_TAB (rdp_tab)));
 
+  if (priv->connected_actions)
+    {
+      vinagre_tab_free_actions (priv->connected_actions);
+      priv->connected_actions = NULL;
+    }
+
   if (priv->freerdp_session)
     {
       gdi_free (priv->freerdp_session);
@@ -198,6 +246,7 @@ vinagre_rdp_tab_constructed (GObject *object)
   if (G_OBJECT_CLASS (vinagre_rdp_tab_parent_class)->constructed)
     G_OBJECT_CLASS (vinagre_rdp_tab_parent_class)->constructed (object);
 
+  setup_toolbar (rdp_tab);
   open_freerdp (rdp_tab);
 }
 
@@ -211,6 +260,7 @@ vinagre_rdp_tab_class_init (VinagreRdpTabClass *klass)
   object_class->dispose = vinagre_rdp_tab_dispose;
 
   tab_class->impl_get_tooltip = rdp_tab_get_tooltip;
+  tab_class->impl_get_connected_actions = rdp_get_connected_actions;
 
   g_type_class_add_private (object_class, sizeof (VinagreRdpTabPrivate));
 }
@@ -223,12 +273,103 @@ idle_close (VinagreTab *tab)
   return FALSE;
 }
 
+static GSList *
+create_connected_actions (VinagreRdpTab *tab)
+{
+  GSList *list = NULL;
+  VinagreTabUiAction *action;
+
+  /* View->Scaling */
+  action = g_new (VinagreTabUiAction, 1);
+  action->paths = g_new (gchar *, 3);
+  action->paths[0] = g_strdup ("/MenuBar/ViewMenu");
+  action->paths[1] = g_strdup ("/ToolBar");
+  action->paths[2] = NULL;
+  action->action = GTK_ACTION (gtk_toggle_action_new ("RDPViewScaling",
+                                                 _("S_caling"),
+                                                 _("Fits the remote screen into the current window size"),
+                                                 "zoom-fit-best"));
+  gtk_action_set_icon_name (action->action, "zoom-fit-best");
+  g_signal_connect (action->action, "activate", G_CALLBACK (view_scaling_cb), tab);
+  list = g_slist_append (list, action);
+  tab->priv->scaling_action = action->action;
+
+  return list;
+}
+
+static void
+scaling_button_clicked (GtkToggleToolButton *button,
+                        VinagreRdpTab       *rdp_tab)
+{
+  vinagre_rdp_tab_set_scaling (rdp_tab,
+                               gtk_toggle_tool_button_get_active (button));
+}
+
+static void
+vinagre_rdp_tab_set_scaling (VinagreRdpTab *tab,
+                             gboolean       scaling)
+{
+  VinagreRdpTabPrivate *priv = tab->priv;
+  VinagreConnection    *conn = vinagre_tab_get_conn (VINAGRE_TAB (tab));
+  GtkAllocation         allocation;
+
+  priv->scaling = scaling;
+
+  gtk_toggle_action_set_active (GTK_TOGGLE_ACTION (priv->scaling_action),
+                                priv->scaling);
+
+  compute_offsets_and_scale (priv->display, tab);
+
+  if (scaling)
+    {
+      gtk_widget_set_size_request (priv->display,
+                                   round (vinagre_connection_get_width (VINAGRE_CONNECTION (conn)) * priv->scale),
+                                   round (vinagre_connection_get_height (VINAGRE_CONNECTION (conn)) * priv->scale));
+    }
+  else
+    {
+      gtk_widget_set_size_request (priv->display,
+                                   vinagre_connection_get_width (VINAGRE_CONNECTION (conn)),
+                                   vinagre_connection_get_height (VINAGRE_CONNECTION (conn)));
+    }
+
+  gtk_widget_get_allocation (priv->display, &allocation);
+  gtk_widget_queue_draw_area (priv->display, 0, 0,
+                              allocation.width,
+                              allocation.height);
+}
+
+static void
+setup_toolbar (VinagreRdpTab *rdp_tab)
+{
+  GtkWidget *toolbar = vinagre_tab_get_toolbar (VINAGRE_TAB (rdp_tab));
+  GtkWidget *button;
+
+  /* Space */
+  button = GTK_WIDGET (gtk_separator_tool_item_new ());
+  gtk_tool_item_set_expand (GTK_TOOL_ITEM (button), TRUE);
+  gtk_widget_show (GTK_WIDGET (button));
+  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), GTK_TOOL_ITEM (button), -1);
+
+  /* Scaling */
+  button = GTK_WIDGET (gtk_toggle_tool_button_new ());
+  gtk_tool_button_set_label (GTK_TOOL_BUTTON (button), _("Scaling"));
+  gtk_tool_item_set_tooltip_text (GTK_TOOL_ITEM (button), _("Scaling"));
+  gtk_tool_button_set_icon_name (GTK_TOOL_BUTTON (button), "zoom-fit-best");
+  gtk_widget_show (GTK_WIDGET (button));
+  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), GTK_TOOL_ITEM (button), -1);
+  g_signal_connect (button, "toggled", G_CALLBACK (scaling_button_clicked), rdp_tab);
+  rdp_tab->priv->scaling_button = button;
+}
 
 static void
 frdp_process_events (freerdp *instance,
                      GQueue  *events)
 {
-  frdpEvent *event;
+  VinagreRdpTab        *rdp_tab = ((frdpContext *) instance->context)->rdp_tab;
+  VinagreRdpTabPrivate *priv = rdp_tab->priv;
+  frdpEvent            *event;
+  gint                  x, y;
 
   while (!g_queue_is_empty (events))
     {
@@ -243,10 +384,27 @@ frdp_process_events (freerdp *instance,
                                                 ((frdpEventKey *) event)->code);
                 break;
               case FRDP_EVENT_TYPE_BUTTON:
+                if (priv->scaling)
+                  {
+                    x = round ((((frdpEventButton *) event)->x - priv->offset_x) / priv->scale);
+                    y = round ((((frdpEventButton *) event)->y - priv->offset_y) / priv->scale);
+                  }
+                else
+                  {
+                    x = ((frdpEventButton *) event)->x - priv->offset_x;
+                    y = ((frdpEventButton *) event)->y - priv->offset_y;
+                  }
+
+                if (x < 0)
+                  x = 0;
+
+                if (y < 0)
+                  y = 0;
+
                 instance->input->MouseEvent (instance->input,
                                              ((frdpEventButton *) event)->flags,
-                                             ((frdpEventButton *) event)->x,
-                                             ((frdpEventButton *) event)->y);
+                                             x,
+                                             y);
                 break;
               default:
                 break;
@@ -258,25 +416,112 @@ frdp_process_events (freerdp *instance,
 }
 
 static gboolean
-frdp_drawing_area_draw (GtkWidget      *area,
-                        GdkEventExpose *event,
-                        gpointer        user_data)
+draw_area (GtkWidget     *area,
+           VinagreRdpTab *rdp_tab)
 {
-  VinagreRdpTab        *rdp_tab = (VinagreRdpTab *) user_data;
   VinagreRdpTabPrivate *priv = rdp_tab->priv;
+  VinagreRdpConnection *conn = VINAGRE_RDP_CONNECTION (vinagre_tab_get_conn (VINAGRE_TAB (rdp_tab)));
+  GtkAllocation         allocation;
+  GtkWidget            *scrolled;
   cairo_t              *cr;
-
-  cr = gdk_cairo_create (GDK_DRAWABLE (area->window));
+  gint                  window_width, window_height;
 
   if (priv->surface == NULL)
     return FALSE;
 
+  cr = gdk_cairo_create (GDK_DRAWABLE (area->window));
+
+  scrolled = gtk_widget_get_ancestor (area, GTK_TYPE_SCROLLED_WINDOW);
+  gtk_widget_get_allocation (scrolled, &allocation);
+  window_width = allocation.width;
+  window_height = allocation.height;
+
+  cairo_translate (cr, priv->offset_x, priv->offset_y);
+
+  if (priv->scaling)
+    {
+      cairo_scale (cr, priv->scale, priv->scale);
+
+      gtk_widget_get_allocation (area, &allocation);
+      if (window_width != allocation.width ||
+          window_height != allocation.height)
+        gtk_widget_set_size_request (area,
+                                     (gint) round (vinagre_connection_get_width (VINAGRE_CONNECTION (conn)) * priv->scale),
+                                     (gint) round (vinagre_connection_get_height (VINAGRE_CONNECTION (conn)) * priv->scale));
+    }
+
   cairo_set_source_surface (cr, priv->surface, 0, 0);
   cairo_paint (cr);
 
+  cairo_destroy (cr);
+
+  return TRUE;
+}
+
+static gboolean
+compute_offsets_and_scale (GtkWidget     *area,
+                           VinagreRdpTab *rdp_tab)
+{
+  VinagreRdpTabPrivate *priv = rdp_tab->priv;
+  VinagreRdpConnection *conn = VINAGRE_RDP_CONNECTION (vinagre_tab_get_conn (VINAGRE_TAB (rdp_tab)));
+  GtkAllocation         allocation;
+  GtkWidget            *scrolled;
+  double                scale_x, scale_y;
+  gint                  window_width, window_height;
+
+  if (priv->surface == NULL)
+    return FALSE;
+
+  scrolled = gtk_widget_get_ancestor (area, GTK_TYPE_SCROLLED_WINDOW);
+  gtk_widget_get_allocation (scrolled, &allocation);
+  window_width = allocation.width;
+  window_height = allocation.height;
+
+  if (priv->scaling)
+    {
+      scale_x = (double) window_width / vinagre_connection_get_width (VINAGRE_CONNECTION (conn));
+      scale_y = (double) window_height / vinagre_connection_get_height (VINAGRE_CONNECTION (conn));
+
+      priv->scale = scale_x < scale_y ? scale_x : scale_y;
+      priv->offset_x = round (((double) window_width - vinagre_connection_get_width (VINAGRE_CONNECTION (conn)) * priv->scale) / 2.0);
+      priv->offset_y = round (((double) window_height - vinagre_connection_get_height (VINAGRE_CONNECTION (conn)) * priv->scale) / 2.0);
+    }
+  else
+    {
+      priv->scale = 1.0;
+      priv->offset_x = round (((double) window_width - vinagre_connection_get_width (VINAGRE_CONNECTION (conn))) / 2.0);
+      priv->offset_y = round (((double) window_height - vinagre_connection_get_height (VINAGRE_CONNECTION (conn))) / 2.0);
+    }
+
+  if (priv->offset_x < 0)
+    priv->offset_x = 0;
+
+  if (priv->offset_y < 0)
+    priv->offset_y = 0;
+
   return TRUE;
 }
 
+static gboolean
+frdp_drawing_area_draw (GtkWidget      *area,
+                        GdkEventExpose *event,
+                        gpointer        user_data)
+{
+  VinagreRdpTab *rdp_tab = (VinagreRdpTab *) user_data;
+
+  return draw_area (area, rdp_tab);
+}
+
+static gboolean
+frdp_drawing_area_configure (GtkWidget         *area,
+                             GdkEventConfigure *event,
+                             gpointer           user_data)
+{
+  VinagreRdpTab *rdp_tab = (VinagreRdpTab *) user_data;
+
+  return compute_offsets_and_scale (area, rdp_tab);
+}
+
 static void
 frdp_begin_paint (rdpContext *context)
 {
@@ -302,7 +547,32 @@ frdp_end_paint (rdpContext *context)
   w = gdi->primary->hdc->hwnd->invalid->w;
   h = gdi->primary->hdc->hwnd->invalid->h;
 
-  gtk_widget_queue_draw_area (priv->display, x, y, w, h);
+  if (priv->scaling)
+    {
+      double pos_x, pos_y;
+
+      pos_x = priv->offset_x + x * priv->scale;
+      pos_y = priv->offset_y + y * priv->scale;
+
+      gtk_widget_queue_draw_area (priv->display,
+                                  floor (pos_x),
+                                  floor (pos_y),
+                                  ceil (pos_x + w * priv->scale) - floor (pos_x),
+                                  ceil (pos_y + h * priv->scale) - floor (pos_y));
+    }
+  else
+    {
+      gint pos_x, pos_y;
+
+      pos_x = priv->offset_x + x;
+      pos_y = priv->offset_y + y;
+
+      gtk_widget_queue_draw_area (priv->display,
+                                  pos_x,
+                                  pos_y,
+                                  pos_x + w - pos_x,
+                                  pos_y + h - pos_y);
+    }
 }
 
 static BOOL
@@ -843,7 +1113,7 @@ open_freerdp (VinagreRdpTab *rdp_tab)
   rdpSettings          *settings;
   GtkWindow            *window = GTK_WINDOW (vinagre_tab_get_window (tab));
   gboolean              success = TRUE;
-  gboolean              fullscreen;
+  gboolean              fullscreen, scaling;
   gchar                *hostname, *username;
   gint                  port, width, height;
 
@@ -853,6 +1123,7 @@ open_freerdp (VinagreRdpTab *rdp_tab)
                 "width", &width,
                 "height", &height,
                 "fullscreen", &fullscreen,
+                "scaling", &scaling,
                 "username", &username,
                 NULL);
 
@@ -951,11 +1222,12 @@ open_freerdp (VinagreRdpTab *rdp_tab)
   priv->display = gtk_drawing_area_new ();
   if (priv->display)
     {
-      gtk_widget_set_size_request (priv->display, width, height);
-
       g_signal_connect (priv->display, "expose_event",
                         G_CALLBACK (frdp_drawing_area_draw), rdp_tab);
 
+      g_signal_connect (priv->display, "configure_event",
+                        G_CALLBACK (frdp_drawing_area_configure), rdp_tab);
+
       gtk_widget_add_events (priv->display,
                              GDK_POINTER_MOTION_MASK |
                              GDK_BUTTON_PRESS_MASK |
@@ -984,6 +1256,8 @@ open_freerdp (VinagreRdpTab *rdp_tab)
 
       if (fullscreen)
         gtk_window_fullscreen (window);
+
+      vinagre_rdp_tab_set_scaling (rdp_tab, scaling);
     }
 
   priv->key_press_handler_id = g_signal_connect (window, "key-press-event",
@@ -1015,6 +1289,8 @@ static void
 vinagre_rdp_tab_init (VinagreRdpTab *rdp_tab)
 {
   rdp_tab->priv = VINAGRE_RDP_TAB_GET_PRIVATE (rdp_tab);
+
+  rdp_tab->priv->connected_actions = create_connected_actions (rdp_tab);
 }
 
 GtkWidget *
