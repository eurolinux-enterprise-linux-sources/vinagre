# Process this file with autoconf to produce a configure script.

AC_INIT(vinagre, 2.28.1, http://projects.gnome.org/vinagre/)

VINAGRE_API_VERSION=1.0
AC_SUBST(VINAGRE_API_VERSION)

AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

dnl make sure we keep ACLOCAL_FLAGS around for maintainer builds to work
AC_SUBST(ACLOCAL_AMFLAGS, "\${ACLOCAL_FLAGS}")

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AM_DISABLE_STATIC
AM_PROG_LIBTOOL
AM_PROG_CC_C_O

GNOME_COMPILE_WARNINGS(yes)

#*******************************************************************************
# Internationalization
#*******************************************************************************
GETTEXT_PACKAGE=vinagre
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [GETTEXT package name])

IT_PROG_INTLTOOL([0.35.0])
AM_GLIB_GNU_GETTEXT

GNOME_DOC_INIT

#*******************************************************************************
# Check required GNOME libraries
#*******************************************************************************

GLIB_REQUIRED=2.17.0
GTK_REQUIRED=2.13.1
GCONF_REQUIRED=2.16.0
GTHREAD_REQUIRED=2.0.0
GTK_VNC_REQUIRED=0.3.9
AVAHI_REQUIRED=0.6.22
PANEL_REQUIRED_VERSION=2.0.0
TELEPATHY_GLIB_REQUIRED=0.7.31
XML_REQUIRED=2.6.31
VTE_REQUIRED=0.20

# Check for avahi
AC_ARG_ENABLE(avahi,
              AC_HELP_STRING([--disable-avahi],
                             [Do not use avahi for auto-discover machines [default=no]]),
              enable_avahi=${enableval},
              enable_avahi=yes)

if test "x$enable_avahi" = "xyes" ; then
  PKG_CHECK_MODULES(AVAHI,\
  avahi-ui >= $AVAHI_REQUIRED\
  avahi-gobject >= $AVAHI_REQUIRED)
  AC_SUBST(AVAHI_CFLAGS)
  AC_SUBST(AVAHI_LIBS)
  AC_DEFINE([VINAGRE_ENABLE_AVAHI],[1],[We want avahi support])
fi
AM_CONDITIONAL(AVAHI, test "x$enable_avahi" = "xyes")

PKG_CHECK_MODULES(VINAGRE, \ 
  glib-2.0 >= $GLIB_REQUIRED \
  gio-2.0 >= $GLIB_REQUIRED \
  gtk+-2.0 >= $GTK_REQUIRED \ 
  gconf-2.0 >= $GCONF_REQUIRED \
  gthread-2.0 >= $GTHREAD_REQUIRED \
  gnome-keyring-1 \
  libxml-2.0 >= $XML_REQUIRED
)
AC_SUBST(VINAGRE_CFLAGS)
AC_SUBST(VINAGRE_LIBS)

PKG_CHECK_MODULES(VNC, \
  gtk-vnc-1.0 >= $GTK_VNC_REQUIRED \
  libxml-2.0 >= $XML_REQUIRED
)
AC_SUBST(VNC_CFLAGS)
AC_SUBST(VNC_LIBS)

# Check for SSH
AC_ARG_ENABLE(ssh,
              AS_HELP_STRING([--enable-ssh],
                             [Enable SSH plugin (default=no)]),
              enable_ssh=${enableval},
              enable_ssh=no)

if test "x$enable_ssh" = "xyes" ; then
  PKG_CHECK_MODULES(SSH,\
  vte >= $VTE_REQUIRED \
  libxml-2.0 >= $XML_REQUIRED)
  AC_SUBST(VTE_CFLAGS)
  AC_SUBST(VTE_LIBS)
  AC_DEFINE([VINAGRE_ENABLE_SSH],[1],[We want ssh support])
fi
AM_CONDITIONAL(SSH, test "x$enable_ssh" = "xyes")

# Check for telepathy
AC_ARG_ENABLE(telepathy,
              AS_HELP_STRING([--enable-telepathy=@<:@no/yes/auto@:>@],
                             [Enable telepathy checking]), ,
                             enable_telepathy=auto)

if test "x$enable_telepathy" != "xno"; then
   PKG_CHECK_MODULES(TELEPATHY,
   [
      telepathy-glib >= $TELEPATHY_GLIB_REQUIRED
   ], have_telepathy="yes", have_telepathy="no")
   if test "x$have_telepathy" = "xyes"; then
      AC_SUBST(TELEPATHY_CFLAGS)
      AC_SUBST(TELEPATHY_LIBS)
      AC_DEFINE(HAVE_TELEPATHY, [], [Define if you have telepathy])
   fi
else
   have_telepathy=no
fi

if test "x$enable_telepathy" = "xyes" -a "x$have_telepathy" != "xyes"; then
   AC_MSG_ERROR([Couldn't find telepathy dependencies.])
fi

AM_CONDITIONAL(TELEPATHY, test "x$have_telepathy" = "xyes")

# Enable/disable gnome-panel applet
AC_ARG_ENABLE(applet,
              AS_HELP_STRING([--disable-applet], [Do not build the panel applet @<:@default=enabled@:>@]),
              enable_applet=$enableval,
              enable_applet=yes)

if test "x$enable_applet" = "xyes";then
   PKG_CHECK_MODULES(APPLET, libpanelapplet-2.0 >= $PANEL_REQUIRED_VERSION)
   AC_SUBST(APPLET_CFLAGS)
   AC_SUBST(APPLET_LIBS)
fi
AM_CONDITIONAL(APPLET, test "x$enable_applet" = "xyes")

dnl ================================================================
dnl GConf related settings
dnl ================================================================

AC_PATH_PROG(GCONFTOOL, gconftool-2)
AM_GCONF_SOURCE_2

dnl Check for bind in libsocket (needed on Solaris)
AC_CHECK_LIB(socket, bind)

dnl define a MAINT-like variable REBUILD which is set
dnl if Perl, so autogenerated sources can be rebuilt
AC_PATH_PROGS(PERL, perl5 perl)
AC_ARG_ENABLE(rebuilds, [  --disable-rebuilds      disable all source autogeneration rules],,enable_rebuilds=yes)
REBUILD=\#
if test "x$enable_rebuilds" = "xyes" && \
     test -n "$PERL" && \
     $PERL -e 'exit !($] >= 5.002)' > /dev/null 2>&1 ; then
  REBUILD=
fi
AC_SUBST(REBUILD)

# Plugins
#*******************************************************************************
#
dnl active plugins for vinagre.schemas
ACTIVE_PLUGINS="vnc"
if test "x$enable_ssh" = "xyes" ; then
ACTIVE_PLUGINS="$ACTIVE_PLUGINS,ssh"
fi
AC_SUBST(ACTIVE_PLUGINS)

VINAGRE_IMPLIB="-lvinagre-${VINAGRE_API_VERSION}"
PLUGIN_LIBTOOL_FLAGS="-module -avoid-version"
LOADER_LIBTOOL_FLAGS="-module -avoid-version"

AC_SUBST(VINAGRE_IMPLIB)
AC_SUBST(PLUGIN_LIBTOOL_FLAGS)
AC_SUBST(LOADER_LIBTOOL_FLAGS)

VINAGRE_PLUGINS_DATA_DIR="$datadir/vinagre-1/plugins"
AC_SUBST(VINAGRE_PLUGINS_DATA_DIR)

VINAGRE_PLUGINS_LIBS_DIR="$libdir/vinagre-1/plugins"
AC_SUBST(VINAGRE_PLUGINS_LIBS_DIR)

#*******************************************************************************
AC_OUTPUT([
Makefile
data/Makefile
data/vinagre.desktop.in
data/vinagre-file.desktop.in
data/vinagre.pc
data/vinagre.schemas.in
data/icons/Makefile
help/Makefile
po/Makefile.in
plugin-loaders/Makefile
plugin-loaders/c/Makefile
plugins/Makefile
plugins/vnc/Makefile
plugins/ssh/Makefile
vinagre/Makefile
vinagre/view/Makefile
])

#*******************************************************************************

echo "

This is vinagre version AC_PACKAGE_VERSION

Configure summary:

	Compiler ...................:  ${CC} 
	Compiler Flags .............:  ${CFLAGS}

	Avahi enabled ..............:  ${enable_avahi}
	GNOME Panel applet..........:  ${enable_applet}
	Telepathy support ..........:  ${have_telepathy}
	SSH plugin .................:  ${enable_ssh}
"
